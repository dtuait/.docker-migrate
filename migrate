#!/bin/bash

while [ $# -gt 0 ]; do

    if [[ $1 == *"--"* ]]
    then
        param="${1/--/}"
        declare $param="$2"
        # echo $param $1 $2 # Optional to see the parameter:value result
    fi

  shift 1 # rykker positionelle parameter en gang til venstre
done






# if migrate is not not "export" or "import"
# if [[ -z "$migrate" ]]; then echo "Please specify '--migrate 'export|import''"; exit 1; fi;
if [[ "$migrate" != "export" && "$migrate" != "import" ]]; then echo "Please specify '--migrate 'export|import''"; exit 1; fi;

# Require root privileges
if [ "$EUID" -ne 0 ]; then echo "Please run as root"; exit 1; fi


# before doing anything make sure all containers are stopped
docker stop $(docker ps -a -q) > /dev/null 2>&1


SCRIPT_DIR=$(pwd)/$(dirname "$0")
if [ "$(basename $(bash -c "cd '${SCRIPT_DIR}/' && pwd"))" == "migration_station" ]; then
    PROJECT_NAME=$(basename "$0")
    PARENT_DIR="migration_station"
else
    PROJECT_NAME=$(basename $(bash -c "cd '${SCRIPT_DIR}/' && cd ../ && pwd"))
    PARENT_DIR=$PROJECT_NAME
fi







gecho() {
  local msg=$1  # Capture the argument
  echo -e "\e[32m${msg}\e[0m"
}




recho() {
  local msg=$1  # Capture the argument
  echo -e "\e[31m${msg}\e[0m"
}

oecho() {
  local msg=$1  # Capture the argument
  echo -e "\e[33m${msg}\e[0m"
}



# echo "PROJECT_NAME: $PROJECT_NAME"
# echo "SCRIPT_DIR: $SCRIPT_DIR"
# echo "PARENT_DIR: $PARENT_DIR"
# exit 1



















# Export script starts here
if [ "$migrate" == "export" ]; then


    # exit 1 if $PARENT_DIR is migration_station
    if [ "$PARENT_DIR" == "migration_station" ]; then
        recho "Error: $PARENT_DIR is not a valid parent directory name."
        exit 1
    fi



    gecho "Exporting volumes..."

    # cd do the location of the script
    gecho "cd's to $SCRIPT_DIR"
    cd $SCRIPT_DIR


    # Delete the volumes directory if it exists, then recreate it
    if [ -d "_volumes" ]; then
        gecho "Deleting old volumes..."
        rm -rf _volumes
    fi
    mkdir -p ./_volumes

    # Array of images to export
    mapfile -t images < images.txt

    # Read volumesto export
    mapfile -t volumes < volumes.txt

    # Loop over volumes and back each one up
    for volume in "${volumes[@]}"; do
        gecho "Backing up $volume..."
        docker run --rm -v $volume:/volume -v $(pwd)/_volumes:/backup alpine tar -czvf /backup/$volume.tar /volume > /dev/null

        if [ $? -eq 0 ]
        then
            gecho "$volume backed up successfully."
        else
            recho "Error backing up $volume."
            exit 1
        fi
    done

    gecho "Done exporting volumes."


    gecho "Exporting images..."
    # Delete the images directory if it exists, then recreate it
    if [ -d "_images" ]; then
        gecho "Deleting old images..."
        rm -rf _images
    fi
        mkdir _images

    for images in "${images[@]}"; do
    safe_image_name=$(echo $images | tr '/' '.')
    gecho "Backing up $images..."
    oecho "docker save -o _images/$safe_image_name.tar $images > /dev/null"
    docker save -o _images/$safe_image_name.tar $images > /dev/null

    if [ $? -eq 0 ]
    then
        gecho "$images backed up successfully."
    else
        recho "Error backing up $images."
        exit 1
    fi

    ### should entire directory ###
    # Define the directory where the tar.gz file should be saved
    save_directory="${SCRIPT_DIR}/../../migration_station"



    # Define the tar.gz file name
    # Create file name base
    tar_filename="${PROJECT_NAME}.tar.gz"

    # Create the directory if it does not exist
    if [ ! -d "$save_directory" ]; then
        mkdir -p "$save_directory"
    fi

    
    cd $SCRIPT_DIR && cd ../../

    # delete $save_directory/$tar_filename if it exist
    if [ -f "$save_directory/$tar_filename" ]; then
        gecho "Deleting old $tar_filename... in $save_directory"
        rm "$save_directory/$tar_filename"
    fi


    # Create the tar.gz file
    gecho "Creating tar.gz file..."
    tar -czvf "$save_directory/$tar_filename" "$PROJECT_NAME" > /dev/null

    # remove $save_directory/$PROJECT_NAME if it exist
    if [ -f "$save_directory/${PROJECT_NAME}" ]; then
        gecho "Deleting old ${PROJECT_NAME}... in $save_directory"
        rm "$save_directory/${PROJECT_NAME}"
    fi

    gecho "Creating ${PROJECT_NAME}... in $save_directory"
    cd $SCRIPT_DIR && cp migrate $save_directory/${PROJECT_NAME}
    
    gecho "Done exporting images."


done



# Import script starts here
elif [ "$migrate" == "import" ]; then

     # exit 1 if $PARENT_DIR is not migration_station
    if [ "$PARENT_DIR" != "migration_station" ]; then
        recho "Error: $PARENT_DIR is not a valid parent directory name."
        exit 1
    fi




    


    cd $SCRIPT_DIR && cd ../

    # If $PROJECT_NAME already exists, move it to $PROJECT_NAME-$datetime
    if [ -d "$PROJECT_NAME" ]; then
        datetime=$(date '+%Y-%m-%d-%H-%M-%S')
        gecho "Moving $PROJECT_NAME to $PROJECT_NAME-$datetime..."
        mv $PROJECT_NAME $PROJECT_NAME-$datetime
    fi

    cd $SCRIPT_DIR

    # Extract the tar.gz file and put it in the parent directory
    gecho "Extracting tar.gz file..."
    tar -xzvf $PROJECT_NAME.tar.gz -C ../ > /dev/null

    # cd to the project directory
    gecho "cd's to ../$PROJECT_NAME/.docker-migrate"
    cd ../$PROJECT_NAME/.docker-migrate
    gecho "pwd is $(pwd)"

    # array of image names to import
    mapfile -t images < images.txt

    # Read volumes.txt into array
    mapfile -t volumes < volumes.txt

    gecho "Importing volumes..."
    # import volumes to docker
    for volume in "${volumes[@]}"; do

        # check if volume exists, if it does, rename it to $volume-$datetime
        if [ ! -z "$(docker volume ls -q | grep $volume)" ]; then
            datetime=$(date '+%Y-%m-%d-%H-%M-%S')
            oecho "Renaming $volume to $volume-$datetime..."
            docker volume rename $volume $volume-$datetime
        fi


        # Check if the volume exists, if not create it
        if [ -z "$(docker volume ls -q | grep $volume)" ]; then
        

            gecho "Creating volume $volume..."
            
            docker volume create $volume

            gecho "Importing $volume..."

            docker run --rm -v $volume:/volume -v $(pwd)/_volumes:/backup alpine tar -xzvf /backup/$volume.tar >/dev/null

            if [ $? -eq 0 ]; then
                gecho "$volume imported successfully."
            else
                recho "Error importing $volume."
                exit 1
            fi

        else
            recho "Volume $volume already exists."
            exit 1
        fi

    done

    gecho "Done importing volumes."

    # delete _volume directory
    gecho "Deleting _volumes directory..."
    rm -rf _volumes

    gecho "Importing images..."


    for image in "${images[@]}"; do
        gecho "Loading image $image..."

        # delete image if it exists
        if [ ! -z "$(docker images -q $image)" ]; then

            # if container is using this image, delete it
            if [ ! -z "$(docker ps -a -q -f ancestor=$image)" ]; then
                recho "Error: Container is using $image."
                exit 1
            fi

            oecho "Deleting aleady existing image in this docker enviroment; image: $image..."
            docker rmi $image >/dev/null
        fi
        
        safe_image_name=$(echo $images | tr '/' '.')
        echo $safe_image_name
        docker load -i _images/$safe_image_name.tar >/dev/null

        if [ $? -eq 0 ]; then
            gecho "$image loaded successfully."
        else
            recho "Error loading $image."
            exit 1
        fi
    done

    # delete _images directory
    gecho "Deleting _images directory..."
    rm -rf _images

    gecho "Done importing images."

# Import script ends here    
fi

gecho "Script has completed $migrate"
exit 0
